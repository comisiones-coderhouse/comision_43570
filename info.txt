git init : inicializa un repo nuevo (.git) donde tire el comando

npm  { install | i } :

npm i 




HOOK :  son funciones que nos sirven para meter una nueva funcionalidad en un componentes



function useSate(init){

    const resultado = []

    return resultado 

}


COMPONENTES : Son funciones en mayuscula con retorno usualmente en jsx que pueden reaccionar a cambios y recargar su cuerpo (ciclo de vida)


MONTADO

ACTUALIZACION

DESMONTADO



function PokemonContainer (){

    useEffect()


    return (
        <></>
    )
}




import {useParams} from "react-router-dom"


const res = useParams() //






Pasar datos de un Componente Hijo(ch) a un Componente Padre(cp) / State Uplifting : 


1- hay que hacer una funcion en el cp
2- hay que enviarsela al ch (por props)
3- el ch decide el momento en que quiere ejecutar la funcion que reciba (callback)
4- cuando la ejecute, le puede pasar lo que quiera 
5- el cp recibe el dato y lo usa como quiera




PATRON CONTAINER 
PATRON PROVIDER 

IMPLEMENTACION DE CONTEXT API

1- crear el contexto
2- sacarle el provider
3- hacer un componente propio
4- usar el provider en mi componente customizado
5- uso mi componente customizado en el lugar que yo quiera, a partir de ahi la info del contexto se comparte hacia abajo



CONSUMIR EL VALOR DEL CONTEXTO 

1- traer el hook useContext
2- traer el objeto contexto (el que obtuve de la createContext)
3- ejecutar el hook pasandole como parametro el objeto contexto
4- profit ???



    //Primitivo (por valor)
    //const a = true
    /* const [a,setA] = useState("")

    const b = a
    b = nuevoValor
    setA(b)
 */



    //Object (por referencia)
    ///const [a, setA] = useState([])


    //a[a.length + 1] = nuevoValor
    //a.push(nuevoValor)
    //setA(a.push(nuevoValor))
    //const b = a 
    //b.push(nuevoValor)
    //const copia = a.splice()

    //const copia = [...a]
    //const copia = a.slice(0)
    //const copia = a.concat([])
    //const copia = JSON.parse(JSON.stringify(a))
    //const copia = Object.assign([], a)

    //OPERADOR REST/SPREAD (...)


    /*   function foo(...params){
          console.log(params)
      }
  
      foo(1,2,3)
  
   */


    //const arr = [1, 2, 3]

    //const arr2 = arr

    //const arr2 = [ arr ]
    //const arr2 = [ 1,2,3 ]

    //const arr2 = [...arr]


    //const obj = {x:1,y:2}
    //const ob2 = obj2
    //const obj2 = {...obj}








FIREBASE : Es una plataforma de google que nos permite acceder a varios servicios web

CONSOLA DE FIREBASE : Es solamente la primera pagina que se ve cuando se entra al sitio de firebase

PROYECTO : Es el lugar donde puedo administrar los servicios (activacion/modoficacion/baja)

SERVICIOS : Cada uno de los recursos que podemos usar dentro del proyecto como el de Auth , DB , Storage , Hosting , etc

APP : Es el acceso privado desde el exterior a los servicios a traves de keys


https://firebase.google.com/docs/reference/js?authuser=0&hl=en


CRUD - ABM

getDocs - getDoc - addDoc - deleteDoc - updateDoc


fetch(url)
.then(res => res.json())
.then(data => console.log(data))

getDocs(query)
.then()

getDoc(query)
.then()




1- build
2- deploy
3- hosting (?)
4- .env
5- markdown (.md)


Entrega : 

1- El proyecto deberia constar de : 
    * el codigo fuente MENOS archivos inutilizados
    * un archivo README.md con la documentacion de la app
    * una representacion multimedia del proyecto/flujo de compra : GIF/video/Imagenes en doc/deploy


Hosting sugeridos : 
    *  Github Pages
    *  Firebase Hosting
    *  Netlify
    *  Vercel

Documentacion : 
    * Descripcion del proyecto 
    * Descripcion/listado de las herramientas/tecnologias utilizadas
    * Modo de uso/instalacion
    * Link al deploy

    * Descripcion del programador/a
    * Todos


Errores generales : 

1 - Saquen los console.logs
2 - Saquen los Comentarios 
3 - Saquen archivos/componentes/variables/props innecesario/as



Componentes :

App : Contiene toda la aplicacion
NavBar : Contiene los links y el widget
CartWidget : Contiene el icono mas la logica del contexto
ItemListContainer : Contiene la logica condicional del pedido de productos
ItemList : contiene la logica del listato/mapeo
Item : un solo producto/tarjeta
ItemDetailContainer : Contiene la logica condicional del pedido del detalle de un producto
ItemDetail : muestra el detalle completo, recibe por props la info y por el contador la cantidad
ItemCount :  tiene la logica de la cantidad de cada producto 
Cart : tiene el mapeo del carrito y el proceso final de compra
CartProvider : tiene la logica completa de toda la funcionalidad del carrito con sus cambios

Rutas : 

/ : ItemListContainer
/categoria/:id : ItemListContainer
/item/:id : ItemDetailContainer
/cart : Cart